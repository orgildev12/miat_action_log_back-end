-- ========================
-- LOCATION GROUP
-- ========================
CREATE TABLE location_group (
    id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name_en NVARCHAR2(50) NOT NULL,
    name_mn NVARCHAR2(50) NOT NULL
);

-- ========================
-- LOCATION
-- ========================
CREATE TABLE location (
    id                NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name_en           NVARCHAR2(50) NOT NULL,
    name_mn           NVARCHAR2(50) NOT NULL,
    location_group_id NUMBER,
    CONSTRAINT fk_location_group
        FOREIGN KEY (location_group_id)
        REFERENCES location_group (id)
);

-- ========================
-- HAZARD TYPE
-- ========================
CREATE TABLE hazard_type (
    id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name_en   NVARCHAR2(100) NOT NULL,
    name_mn   NVARCHAR2(100) NOT NULL,
    last_code NUMBER DEFAULT 0 NOT NULL
);

-- ========================
-- STATUS
-- ========================
CREATE TABLE status (
    id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name_en NVARCHAR2(25) NOT NULL,
    name_mn NVARCHAR2(25) NOT NULL
);

-- ========================
-- HAZARD
-- ========================
CREATE TABLE hazard (
    id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code         VARCHAR2(25) NOT NULL,
    user_id      NUMBER NOT NULL,
    type_id      NUMBER NOT NULL,
    location_id  NUMBER NOT NULL,
    description  NVARCHAR2(1000) NOT NULL,
    solution     NVARCHAR2(1000),
    is_private   NUMBER(1) CHECK (is_private IN (0,1)),
    status_id    NUMBER NOT NULL,
    date_created DATE DEFAULT SYSDATE,
    date_updated DATE DEFAULT SYSDATE,

    CONSTRAINT fk_hazard_type
        FOREIGN KEY (type_id) REFERENCES hazard_type (id),
    CONSTRAINT fk_hazard_location
        FOREIGN KEY (location_id) REFERENCES location (id),
    CONSTRAINT fk_hazard_status
        FOREIGN KEY (status_id) REFERENCES status (id)
);

-- ========================
-- HAZARD IMAGE (subtable)
-- ========================
CREATE TABLE hazard_image (
    id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    hazard_id   NUMBER NOT NULL,
    image_data  BLOB NOT NULL,
    CONSTRAINT fk_hazard_image
        FOREIGN KEY (hazard_id)
        REFERENCES hazard (id)
);

-- ========================
-- TRIGGER to enforce MAX 3 images per hazard
-- ========================
CREATE OR REPLACE TRIGGER trg_limit_hazard_images
BEFORE INSERT ON hazard_image
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM hazard_image
    WHERE hazard_id = :NEW.hazard_id;

    IF v_count >= 3 THEN
        RAISE_APPLICATION_ERROR(-20001, 'A hazard cannot have more than 3 images');
    END IF;
END;
/

-- ========================
-- TRIGGER: Auto-generate hazard code
-- ========================
CREATE OR REPLACE TRIGGER trg_generate_hazard_code
BEFORE INSERT ON hazard
FOR EACH ROW
DECLARE
    v_type_name NVARCHAR2(100);
    v_new_code NUMBER;
    v_generated_code VARCHAR2(50);
BEGIN
    -- Get the hazard type name (English) and increment the last_code
    SELECT name_en, NVL(last_code, 0) + 1
    INTO v_type_name, v_new_code
    FROM hazard_type
    WHERE id = :NEW.type_id;
    
    -- Generate the code in format "TYPENAME-1"
    v_generated_code := UPPER(v_type_name) || '-' || v_new_code;
    
    -- Set the generated code to the new hazard record
    :NEW.code := v_generated_code;
    
    -- Update the last_code in hazard_type table
    UPDATE hazard_type 
    SET last_code = v_new_code 
    WHERE id = :NEW.type_id;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'Invalid hazard type ID: ' || :NEW.type_id);
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003, 'Error generating hazard code: ' || SQLERRM);
END;
/

-- ========================
-- Example usage:
-- ========================
-- First, insert some test data:

-- INSERT INTO location_group (name_en, name_mn) VALUES ('Building A', 'А барилга');
-- INSERT INTO location (name_en, name_mn, location_group_id) VALUES ('Floor 1', '1-р давхар', 1);
-- INSERT INTO hazard_type (name_en, name_mn) VALUES ('FIRE', 'ГАЛ');
-- INSERT INTO hazard_type (name_en, name_mn) VALUES ('SLIP', 'ГУЛСАЛТ');
-- INSERT INTO status (name_en, name_mn) VALUES ('Open', 'Нээлттэй');

-- Then insert hazards - codes will be auto-generated:
-- INSERT INTO hazard (user_id, type_id, location_id, description, solution, is_private, status_id) 
-- VALUES (1, 1, 1, 'Fire detected in kitchen area', 'Contact fire department', 0, 1);
-- Result: code = "FIRE-1"

-- INSERT INTO hazard (user_id, type_id, location_id, description, solution, is_private, status_id) 
-- VALUES (1, 1, 1, 'Fire alarm malfunction', 'Replace batteries', 0, 1);
-- Result: code = "FIRE-2"

-- INSERT INTO hazard (user_id, type_id, location_id, description, solution, is_private, status_id) 
-- VALUES (1, 2, 1, 'Wet floor in hallway', 'Place warning signs', 0, 1);
-- Result: code = "SLIP-1"
