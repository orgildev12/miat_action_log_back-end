CREATE TABLE admin_role (
    id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_name     NVARCHAR2(50) NOT NULL
);
-- 1: admin, 2: response-admin, 3: audit-admin, 4: task-admin,  5: special-admin, 6: super-admin
-- user table is in a another database that I can't fully access but can fetch the user's info

CREATE TABLE admin (
    id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id       NUMBER NOT NULL,
    role_id       NUMBER NOT NULL,
    CONSTRAINT fk_admin_role
        FOREIGN KEY (role_id)
        REFERENCES admin_role (id)
);


CREATE TABLE location_group (
    id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name_en NVARCHAR2(50) NOT NULL,
    name_mn NVARCHAR2(200) NOT NULL
);


CREATE TABLE location (
    id                NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name_en           NVARCHAR2(50) NOT NULL,
    name_mn           NVARCHAR2(200) NOT NULL,
    location_group_id NUMBER,
    CONSTRAINT fk_location_group
        FOREIGN KEY (location_group_id)
        REFERENCES location_group (id)
);


CREATE TABLE hazard_type (
    id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    short_code   NVARCHAR2(10) NOT NULL,
    name_en      NVARCHAR2(200) NOT NULL,
    name_mn      NVARCHAR2(200) NOT NULL,
    is_private   NUMBER(1) CHECK (is_private IN (0,1)) NOT NULL,
    last_index   NUMBER DEFAULT 0 NOT NULL
);


CREATE TABLE hazard (
        id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        code         VARCHAR2(50) NOT NULL,
        status_en    NVARCHAR2(200) DEFAULT 'Sent' CHECK (status_en IN ('Sent', 'On it', 'Solved', 'Rejected')) NOT NULL,
        status_mn    NVARCHAR2(200) DEFAULT N'Илгээгдсэн' CHECK (status_mn IN (N'Илгээгдсэн', N'Ажиллаж байна', N'Шийдэгдсэн', N'Татгалзсан')) NOT NULL,
        user_id      NUMBER,
        user_name    NVARCHAR2(320),
        email        NVARCHAR2(320),
        phone_number VARCHAR2(8),
        type_id      NUMBER NOT NULL,
        location_id  NUMBER NOT NULL,
        description  NVARCHAR2(2000) NOT NULL,
        solution     NVARCHAR2(2000) NOT NULL,
        date_created DATE DEFAULT SYSDATE,
        has_image   NUMBER(1) CHECK (has_image IN (0,1)) NOT NULL,
        CONSTRAINT fk_hazard_type
            FOREIGN KEY (type_id) REFERENCES hazard_type (id),
        CONSTRAINT fk_hazard_location
            FOREIGN KEY (location_id) REFERENCES location (id),
        CONSTRAINT chk_user_identification
            CHECK (
                (user_id IS NOT NULL AND user_name IS NULL AND email IS NULL AND phone_number IS NULL) OR
                (user_id IS NULL AND user_name IS NOT NULL AND email IS NOT NULL AND phone_number IS NOT NULL)
            )
);


CREATE TABLE response (
        hazard_id               NUMBER PRIMARY KEY,
        current_status          NVARCHAR2(200) DEFAULT N'Ирсэн' CHECK (current_status IN (N'Ирсэн', N'Шийдэгдсэн', N'Татгалзсан', N'Буцаасан')) NOT NULL,
        is_started              NUMBER(1) DEFAULT 0 CHECK (is_started IN (0,1)) NOT NULL,
        response_body           CLOB,
        is_request_approved     NUMBER(1) CHECK (is_request_approved IN (0,1)),
        is_response_finished    NUMBER(1) DEFAULT 0 CHECK (is_response_finished IN (0,1)) NOT NULL,
        response_finished_date  DATE,
        is_response_confirmed   NUMBER(1) DEFAULT 0 CHECK (is_response_confirmed IN (0,1)) NOT NULL,
        is_response_denied      NUMBER(1) DEFAULT 0 CHECK (is_response_denied IN (0,1)) NOT NULL,
        reason_to_deny          NVARCHAR2(2000),
        date_updated            DATE DEFAULT SYSDATE,
        CONSTRAINT fk_response_hazard
            FOREIGN KEY (hazard_id) REFERENCES hazard (id)
);


CREATE TABLE task_owners (
    hazard_id               NUMBER NOT NULL,
    admin_id                NUMBER NOT NULL,
    is_collaborator         NUMBER(1) DEFAULT 0 CHECK (is_collaborator IN (0,1)) NOT NULL,
    CONSTRAINT pk_task_owners PRIMARY KEY (hazard_id, admin_id),
    CONSTRAINT fk_task_owners_hazard FOREIGN KEY (hazard_id) REFERENCES hazard(id),
    CONSTRAINT fk_task_owners_admin FOREIGN KEY (admin_id) REFERENCES admin(id)
);
-- types of responsibility can be  'response-owner', 'audit-owner' and 'response-collaborator', 'audit-collaborator'


CREATE TABLE hazard_image (
    id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    hazard_id   NUMBER NOT NULL,
    image_data  BLOB NOT NULL,
    CONSTRAINT fk_hazard_image
        FOREIGN KEY (hazard_id)
        REFERENCES hazard (id)
);

-- Triggers
CREATE OR REPLACE TRIGGER trg_limit_hazard_images
BEFORE INSERT ON hazard_image
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM hazard_image
    WHERE hazard_id = :NEW.hazard_id;

    IF v_count >= 3 THEN
        RAISE_APPLICATION_ERROR(-20001, 'A hazard cannot have more than 3 images');
    END IF;
END;
/


CREATE OR REPLACE TRIGGER trg_generate_hazard_code
BEFORE INSERT ON hazard
FOR EACH ROW
DECLARE
    v_type_name NVARCHAR2(100);
    v_new_code NUMBER;
    v_generated_code VARCHAR2(50);
BEGIN
    -- Get the hazard type short_code and increment the last_index
    SELECT short_code, NVL(last_index, 0) + 1
    INTO v_type_name, v_new_code
    FROM hazard_type
    WHERE id = :NEW.type_id;
    
    -- Generate the code in format "SHORTCODE-1"
    v_generated_code := UPPER(v_type_name) || '-' || v_new_code;
    
    -- Set the generated code to the new hazard record
    :NEW.code := v_generated_code;
    
    -- Update the last_index in hazard_type table
    UPDATE hazard_type 
    SET last_index = v_new_code 
    WHERE id = :NEW.type_id;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'Invalid hazard type ID: ' || :NEW.type_id);
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003, 'Error generating hazard code: ' || SQLERRM);
END;
/


CREATE OR REPLACE TRIGGER trg_create_response_for_hazard
AFTER INSERT ON hazard
FOR EACH ROW
BEGIN
    INSERT INTO response (hazard_id, current_status)
    VALUES (:NEW.id, N'Ирсэн');
END;
/


CREATE OR REPLACE TRIGGER trg_update_hazard_status_on_response
AFTER UPDATE OF is_response_confirmed ON response
FOR EACH ROW
BEGIN
    IF :NEW.is_response_confirmed = 1 THEN
        IF :NEW.CURRENT_STATUS = N'Татгалзсан' THEN
            UPDATE hazard SET status_en = 'Rejected', status_mn = N'Татгалзсан'
            WHERE id = :NEW.hazard_id;
        ELSE 
            UPDATE hazard SET status_en = 'Solved', status_mn = N'Шийдэгдсэн'
            WHERE id = :NEW.hazard_id;
        END IF;
    ELSE
        UPDATE hazard SET status_en = 'On it', status_mn = N'Ажиллаж байна'
        WHERE id = :NEW.hazard_id;
    END IF;
END;
/ 


CREATE OR REPLACE TRIGGER trg_delete_related_on_hazard_delete
BEFORE DELETE ON hazard
FOR EACH ROW
BEGIN
    DELETE FROM response WHERE hazard_id = :OLD.id;
    DELETE FROM task_owners WHERE hazard_id = :OLD.id;
    DELETE FROM hazard_image WHERE hazard_id = :OLD.id;
END;
/
