CREATE TABLE location_group (
    id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name_en NVARCHAR2(50) NOT NULL,
    name_mn NVARCHAR2(50) NOT NULL
);


CREATE TABLE location (
    id                NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name_en           NVARCHAR2(50) NOT NULL,
    name_mn           NVARCHAR2(50) NOT NULL,
    location_group_id NUMBER,
    CONSTRAINT fk_location_group
        FOREIGN KEY (location_group_id)
        REFERENCES location_group (id)
);


CREATE TABLE hazard_type (
    id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    short_code NVARCHAR2(10) NOT NULL,
    name_en    NVARCHAR2(100) NOT NULL,
    name_mn    NVARCHAR2(100) NOT NULL,
    last_index NUMBER DEFAULT 0 NOT NULL
);


CREATE TABLE hazard (
        id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        code         VARCHAR2(25) NOT NULL,
        status_en    NVARCHAR2(50) DEFAULT 'Sent' CHECK (status_en IN ('Sent', 'On it', 'Solved', 'Rejected')) NOT NULL,
        status_mn    NVARCHAR2(50) DEFAULT 'Илгээгдсэн' CHECK (status_mn IN ('Илгээгдсэн', 'Ажиллаж байна', 'Шийдэгдсэн', 'Татгалзсан')) NOT NULL,
        user_id      NUMBER,
        type_id      NUMBER NOT NULL,
        location_id  NUMBER NOT NULL,
        description  NVARCHAR2(1000) NOT NULL,
        solution     NVARCHAR2(1000) NOT NULL,
        is_private   NUMBER(1) CHECK (is_private IN (0,1)) NOT NULL,
        date_created DATE DEFAULT SYSDATE,
        CONSTRAINT fk_hazard_type
            FOREIGN KEY (type_id) REFERENCES hazard_type (id),
        CONSTRAINT fk_hazard_location
            FOREIGN KEY (location_id) REFERENCES location (id)
);

CREATE TABLE response (
        hazard_id               NUMBER PRIMARY KEY,
        current_status          NVARCHAR2(50) DEFAULT 'Илгээгдсэн' CHECK (current_status IN ('Ирсэн', 'Ажиллаж байгаа', 'Шийдэгдсэн', 'Татгалзсан', 'Шалгаж байгаа', 'Зөвшөөрсөн', 'Буцаасан')) NOT NULL,
        is_started              NUMBER(1) DEFAULT 0 CHECK (is_started IN (0,1)) NOT NULL,
        response_body           CLOB,
        is_request_approved     NUMBER(1) CHECK (is_request_approved IN (0,1)),
        is_response_finished    NUMBER(1) DEFAULT 0 CHECK (is_response_finished IN (0,1)) NOT NULL,
        response_finished_date  DATE,
        is_checking_response    NUMBER(1) DEFAULT 0 CHECK (is_checking_response IN (0,1)) NOT NULL,
        is_response_confirmed   NUMBER(1) DEFAULT 0 CHECK (is_response_confirmed IN (0,1)) NOT NULL,
        is_response_denied      NUMBER(1) DEFAULT 0 CHECK (is_response_denied IN (0,1)) NOT NULL,
        reason_to_deny          NVARCHAR2(1000),
        date_updated            DATE DEFAULT SYSDATE,
        CONSTRAINT fk_response_hazard
            FOREIGN KEY (hazard_id) REFERENCES hazard (id)
);


CREATE TABLE hazard_image (
    id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    hazard_id   NUMBER NOT NULL,
    image_data  BLOB NOT NULL,
    CONSTRAINT fk_hazard_image
        FOREIGN KEY (hazard_id)
        REFERENCES hazard (id)
);

-- Triggers
CREATE OR REPLACE TRIGGER trg_limit_hazard_images
BEFORE INSERT ON hazard_image
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM hazard_image
    WHERE hazard_id = :NEW.hazard_id;

    IF v_count >= 3 THEN
        RAISE_APPLICATION_ERROR(-20001, 'A hazard cannot have more than 3 images');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_generate_hazard_code
BEFORE INSERT ON hazard
FOR EACH ROW
DECLARE
    v_type_name NVARCHAR2(100);
    v_new_code NUMBER;
    v_generated_code VARCHAR2(50);
BEGIN
    -- Get the hazard type name (English) and increment the last_code
    SELECT name_en, NVL(last_code, 0) + 1
    INTO v_type_name, v_new_code
    FROM hazard_type
    WHERE id = :NEW.type_id;
    
    -- Generate the code in format "TYPENAME-1"
    v_generated_code := UPPER(v_type_name) || '-' || v_new_code;
    
    -- Set the generated code to the new hazard record
    :NEW.code := v_generated_code;
    
    -- Update the last_code in hazard_type table
    UPDATE hazard_type 
    SET last_code = v_new_code 
    WHERE id = :NEW.type_id;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'Invalid hazard type ID: ' || :NEW.type_id);
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20003, 'Error generating hazard code: ' || SQLERRM);
END;
/

-- Automatically create a response row when a hazard is inserted
CREATE OR REPLACE TRIGGER trg_create_response_for_hazard
AFTER INSERT ON hazard
FOR EACH ROW
BEGIN
    INSERT INTO response (hazard_id)
    VALUES (:NEW.id);
END;
/

-- Update hazard status when response status changes
CREATE OR REPLACE TRIGGER trg_update_hazard_status_on_response
AFTER UPDATE OF current_status ON response
FOR EACH ROW
BEGIN
    IF :NEW.current_status = 'Зөвшөөрсөн' THEN
        IF :NEW.is_request_approved = 1 THEN
            UPDATE hazard SET status_en = 'Solved', status_mn = 'Шийдэгдсэн' 
            WHERE id = :NEW.hazard_id;
        ELSE
            UPDATE hazard SET status_en = 'Rejected', status_mn = 'Татгалзсан' 
            WHERE id = :NEW.hazard_id;
        END IF;
    ELSE
        UPDATE hazard SET status_en = 'On it', status_mn = 'Ажиллаж байна' 
        WHERE id = :NEW.hazard_id;
    END IF;
END;
/

-- Delete response when hazard is deleted
CREATE OR REPLACE TRIGGER trg_delete_response_on_hazard_delete
BEFORE DELETE ON hazard
FOR EACH ROW
BEGIN
    DELETE FROM response WHERE hazard_id = :OLD.id;
END;
/
