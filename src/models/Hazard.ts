import { z } from 'zod';

const HazardSchema = z.object({
    id: z.number().int().positive().optional(),
    code: z.string()
        .min(1, 'Code is required')
        .max(25, 'Code must be 25 characters or less')
        .trim()
        .optional(), // Will be generated by trigger
    user_id: z.number().int().positive('User ID must be a positive integer'),
    type_id: z.number().int().positive('Type ID must be a positive integer'), 
    location_id: z.number().int().positive('Location ID must be a positive integer'),
    description: z.string()
        .min(1, 'Description is required')
        .max(1000, 'Description must be 1000 characters or less')
        .trim(),
    solution: z.string()
        .min(1, 'Solution is required')
        .max(1000, 'Solution must be 1000 characters or less')
        .trim(),
    is_private: z.number().int().min(0).max(1, 'Is private must be 0 or 1').default(0), // CHECK (is_private IN (0,1))
    isStarted: z.number().int().min(0).max(1, 'isStarted must be 0 or 1').default(0),
    isApproved: z.number().int().min(0).max(1, 'isApproved must be 0 or 1').nullish(),
    isChecking: z.number().int().min(0).max(1, 'isChecking must be 0 or 1').default(0),
    isConfirmed: z.number().int().min(0).max(1, 'isConfirmed must be 0 or 1').nullish(),
    date_created: z.date().optional(), // Default SYSDATE
    date_updated: z.date().optional()  // Default SYSDATE
});

type IHazardData = z.infer<typeof HazardSchema>;

export class Hazard implements IHazardData {
    static modelFor = {
        createRequest: {} as {
            user_id: number;
            type_id: number;
            location_id: number;
            description: string;
            solution: string;
            is_private: number; // 0 or 1, defaults to 0
        },
        fetchData: {} as {
            ID?: number;
            CODE?: string;
            USER_ID: number;
            TYPE_ID: number;
            LOCATION_ID: number;
            DESCRIPTION: string;
            SOLUTION?: string;
            IS_PRIVATE: number;
            ISSTARTED: number;
            ISAPPROVED?: number | null;
            ISCHECKING: number;
            ISCONFIRMED?: number | null;
            DATE_CREATED?: Date;
            DATE_UPDATED?: Date;
        }
    };

    public id?: number;
    public code?: string;
    public user_id: number;
    public type_id: number;
    public location_id: number;
    public description: string;
    public solution: string;
    public is_private: number;
    public isStarted: number;
    public isApproved?: number | null;
    public isChecking: number;
    public isConfirmed?: number | null;
    public date_created?: Date;
    public date_updated?: Date;

    constructor(data: IHazardData) {
        this.id = data.id;
        this.code = data.code;
        this.user_id = data.user_id;
        this.type_id = data.type_id;
        this.location_id = data.location_id;
        this.description = data.description;
        this.solution = data.solution;
        this.is_private = data.is_private || 0;
        this.isStarted = data.isStarted ?? 0;
        this.isApproved = data.isApproved;
        this.isChecking = data.isChecking ?? 0;
        this.isConfirmed = data.isConfirmed;
        this.date_created = data.date_created;
        this.date_updated = data.date_updated;
    }

    validate(): { isValid: boolean; errors: string[] } {
        const result = HazardSchema.safeParse(this);
        
        if (result.success) {
            return { isValid: true, errors: [] };
        }
        
        const errorMessages = result.error.issues.map(issue => issue.message);
        return { isValid: false, errors: errorMessages };
    }

    toDatabaseFormat(): typeof Hazard.modelFor.fetchData {
        return {
            ID: this.id,
            CODE: this.code,
            USER_ID: this.user_id,
            TYPE_ID: this.type_id,
            LOCATION_ID: this.location_id,
            DESCRIPTION: this.description,
            SOLUTION: this.solution,
            IS_PRIVATE: this.is_private,
            ISSTARTED: this.isStarted,
            ISAPPROVED: this.isApproved ?? null,
            ISCHECKING: this.isChecking,
            ISCONFIRMED: this.isConfirmed ?? null,
            DATE_CREATED: this.date_created,
            DATE_UPDATED: this.date_updated
        };
    }

    toJSON(): IHazardData {
        return {
            id: this.id,
            code: this.code,
            user_id: this.user_id,
            type_id: this.type_id,
            location_id: this.location_id,
            description: this.description,
            solution: this.solution,
            is_private: this.is_private,
            isStarted: this.isStarted,
            isApproved: this.isApproved,
            isChecking: this.isChecking,
            isConfirmed: this.isConfirmed,
            date_created: this.date_created,
            date_updated: this.date_updated
        };
    }

    static fromDatabase(row: any): Hazard {
        return new Hazard({
            id: row.ID,
            code: row.CODE,
            user_id: row.USER_ID,
            type_id: row.TYPE_ID,
            location_id: row.LOCATION_ID,
            description: row.DESCRIPTION,
            solution: row.SOLUTION,
            is_private: row.IS_PRIVATE,
            isStarted: row.ISSTARTED,
            isApproved: row.ISAPPROVED ?? null,
            isChecking: row.ISCHECKING,
            isConfirmed: row.ISCONFIRMED ?? null,
            date_created: row.DATE_CREATED,
            date_updated: row.DATE_UPDATED
        });
    }

    static fromRequestData(request: typeof Hazard.modelFor.createRequest): Hazard {
        return new Hazard({
            user_id: request.user_id,
            type_id: request.type_id,
            location_id: request.location_id,
            description: request.description,
            solution: request.solution,
            is_private: request.is_private || 0,
            isStarted: (request as any).isStarted ?? 0,
            isApproved: (request as any).isApproved ?? null,
            isChecking: (request as any).isChecking ?? 0,
            isConfirmed: (request as any).isConfirmed ?? null
        });
    }
}

export type HazardCreateRequest = typeof Hazard.modelFor.createRequest;
export type HazardData = IHazardData;
export type HazardOracleFormat = typeof Hazard.modelFor.fetchData;
